{
  "version": 3,
  "sources": ["../src/app.ts"],
  "sourcesContent": ["/**\r\n * /!\\ This file is auto-generated.\r\n *\r\n * This is the entry point of your standalone application.\r\n *\r\n * There are multiple tags used by the editor to inject code automatically:\r\n *     - `wle:auto-constants:start` and `wle:auto-constants:end`: The project's constants,\r\n *        such as the project's name, whether it should use the physx runtime, etc...\r\n *     - `wle:auto-benchmark:start` and `wle:auto-benchmark:end`: Append the benchmarking code\r\n */\r\n\r\nimport { loadRuntime, LoadRuntimeOptions, LogLevel } from '@wonderlandengine/api';\r\nimport 'wle-pp/add_type_extensions_to_typescript.js';\r\n\r\nconst waitWindowLoad: Promise<void> = new Promise((resolve: () => void) => {\r\n    if (document.readyState == \"complete\") {\r\n        resolve();\r\n    } else {\r\n        window.addEventListener(\"load\", resolve, { once: true });\r\n    }\r\n});\r\n\r\nawait waitWindowLoad;\r\n\r\n/* wle:auto-constants:start */\nconst Constants = {\n    ProjectName: 'native-pwa',\n    RuntimeBaseName: 'WonderlandRuntime',\n    WebXRRequiredFeatures: ['local',],\n    WebXROptionalFeatures: ['local','local-floor','hand-tracking',],\n};\nconst RuntimeOptions = {\n    physx: true,\n    loader: false,\n    xrFramebufferScaleFactor: 1,\n    xrOfferSession: {\n        mode: 'auto',\n        features: Constants.WebXRRequiredFeatures,\n        optionalFeatures: Constants.WebXROptionalFeatures,\n    },\n    canvas: 'canvas',\n} as const;\n/* wle:auto-constants:end */\r\n\r\nconst disableEngineLogs = false;\r\nif (disableEngineLogs) {\r\n    (RuntimeOptions as LoadRuntimeOptions).logs = [LogLevel.Error];\r\n}\r\n\r\nconst engine = await loadRuntime(Constants.RuntimeBaseName, RuntimeOptions);\r\nengine.onLoadingScreenEnd.once(() => {\r\n    engine\r\n        .requestXRSession('immersive-vr', Constants.WebXRRequiredFeatures, Constants.WebXROptionalFeatures)\r\n        .catch((e) => console.error(e));\r\n\r\n    const el = document.getElementById('version');\r\n    if (el) setTimeout(() => el.remove(), 2000);\r\n});\r\n\r\n/* WebXR setup. */\r\n\r\nfunction requestSession(mode: XRSessionMode): void {\r\n    engine\r\n        .requestXRSession(mode, Constants.WebXRRequiredFeatures, Constants.WebXROptionalFeatures)\r\n        .catch((e) => console.error(e));\r\n}\r\n\r\nfunction setupButtonsXR(): void {\r\n    /* Setup AR / VR buttons */\r\n    const arButton = document.getElementById('ar-button');\r\n    if (arButton) {\r\n        arButton.dataset.supported = engine.arSupported as unknown as string;\r\n        arButton.addEventListener('click', () => requestSession('immersive-ar'));\r\n    }\r\n    const vrButton = document.getElementById('vr-button');\r\n    if (vrButton) {\r\n        vrButton.dataset.supported = engine.vrSupported as unknown as string;\r\n        vrButton.addEventListener('click', () => requestSession('immersive-vr'));\r\n    }\r\n}\r\n\r\nsetupButtonsXR();\r\n\r\nconst sceneLoadDelaySeconds = 0;\r\nif (sceneLoadDelaySeconds > 0) {\r\n    await new Promise((resolve) => setTimeout(resolve, sceneLoadDelaySeconds * 1000));\r\n}\r\n\r\ntry {\r\n    await engine.loadMainScene(`${Constants.ProjectName}.bin`);\r\n} catch (error) {\r\n    console.error(error);\r\n    window.alert(`Failed to load ${Constants.ProjectName}.bin: ` + error);\r\n}\r\n\r\n/* wle:auto-benchmark:start */\n/* wle:auto-benchmark:end */"],
  "mappings": ";AAWA,SAAS,aAAiC,gBAAgB;AAG1D,IAAM,iBAAgC,IAAI,QAAQ,CAAC,YAAwB;AACvE,MAAI,SAAS,cAAc,YAAY;AACnC,YAAQ;AAAA,EACZ,OAAO;AACH,WAAO,iBAAiB,QAAQ,SAAS,EAAE,MAAM,KAAK,CAAC;AAAA,EAC3D;AACJ,CAAC;AAED,MAAM;AAGN,IAAM,YAAY;AAAA,EACd,aAAa;AAAA,EACb,iBAAiB;AAAA,EACjB,uBAAuB,CAAC,OAAQ;AAAA,EAChC,uBAAuB,CAAC,SAAQ,eAAc,eAAgB;AAClE;AACA,IAAM,iBAAiB;AAAA,EACnB,OAAO;AAAA,EACP,QAAQ;AAAA,EACR,0BAA0B;AAAA,EAC1B,gBAAgB;AAAA,IACZ,MAAM;AAAA,IACN,UAAU,UAAU;AAAA,IACpB,kBAAkB,UAAU;AAAA,EAChC;AAAA,EACA,QAAQ;AACZ;AAGA,IAAM,oBAAoB;AAC1B,IAAI,mBAAmB;AACnB,EAAC,eAAsC,OAAO,CAAC,SAAS,KAAK;AACjE;AAEA,IAAM,SAAS,MAAM,YAAY,UAAU,iBAAiB,cAAc;AAC1E,OAAO,mBAAmB,KAAK,MAAM;AACjC,SACK,iBAAiB,gBAAgB,UAAU,uBAAuB,UAAU,qBAAqB,EACjG,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,CAAC;AAElC,QAAM,KAAK,SAAS,eAAe,SAAS;AAC5C,MAAI;AAAI,eAAW,MAAM,GAAG,OAAO,GAAG,GAAI;AAC9C,CAAC;AAID,SAAS,eAAe,MAA2B;AAC/C,SACK,iBAAiB,MAAM,UAAU,uBAAuB,UAAU,qBAAqB,EACvF,MAAM,CAAC,MAAM,QAAQ,MAAM,CAAC,CAAC;AACtC;AAEA,SAAS,iBAAuB;AAE5B,QAAM,WAAW,SAAS,eAAe,WAAW;AACpD,MAAI,UAAU;AACV,aAAS,QAAQ,YAAY,OAAO;AACpC,aAAS,iBAAiB,SAAS,MAAM,eAAe,cAAc,CAAC;AAAA,EAC3E;AACA,QAAM,WAAW,SAAS,eAAe,WAAW;AACpD,MAAI,UAAU;AACV,aAAS,QAAQ,YAAY,OAAO;AACpC,aAAS,iBAAiB,SAAS,MAAM,eAAe,cAAc,CAAC;AAAA,EAC3E;AACJ;AAEA,eAAe;AAEf,IAAM,wBAAwB;AAC9B,IAAI,wBAAwB,GAAG;AAC3B,QAAM,IAAI,QAAQ,CAAC,YAAY,WAAW,SAAS,wBAAwB,GAAI,CAAC;AACpF;AAEA,IAAI;AACA,QAAM,OAAO,cAAc,GAAG,UAAU,iBAAiB;AAC7D,SAAS,OAAP;AACE,UAAQ,MAAM,KAAK;AACnB,SAAO,MAAM,kBAAkB,UAAU,sBAAsB,KAAK;AACxE;",
  "names": []
}
